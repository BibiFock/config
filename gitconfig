[user]
    name = Julien Bernardo
    email = julien.bernardo@matters.tech

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
    upstream = cyan
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[init]
    defaultBranch = main

[core]
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = /home/bbr/.gitignore_global
    editor = vim
[mergetool "fugitive"]
    cmd = vim -f -c \"Gdiff\" \"$MERGED\"
[merge]
    tool = fugitive
[push]
    default = current
[rerere]
    enabled = true
[credential]
    helper = cache

[pretty]
    log=format:"%C(green)%cd %C(red bold)%an%Creset %C(yellow)%h %C(white)%s %C(auto)%d"

[alias]
    st = status -s
    ci = commit -m
    cp = cherry-pick
    br = branch
    co = checkout
    no = show --name-only
    df = diff
    dff = diff --compact-summary
    unstage = reset HEAD --
    last = log -1 HEAD
    lol = !"git --no-pager log --pretty=log --graph --date-order --date=relative -20;echo;"
    lola = log --pretty=log --graph --date-order --date=relative
    loldf = log --pretty=log --graph --date-order --date=relative -10 --decorate --numstat --shortstat
    loa = log --pretty=log --graph --date-order --date=iso --all
    loadf = log --pretty=log --graph --date-order --date=iso --all --decorate --numstat --shortstat
    ls = ls-files
    d = difftool
    hist = whatchanged -p
    dfw = diff --color-words
    #add forgeted files to last commit
    oops = commit --amend --no-edit
    #cancel last oops
    noops = reset --soft HEAD@{1}
    #uncommit
    unci = reset --soft 'HEAD^'
    stave = stash save -u
    rull = pull --rebase -p
    amend = commit --amend -m 
    pop = stash pop
    pu= push -u
    pun= push -u --no-verify
    punf= push -u --no-verify -f
    ; wip = !"git commit -m \"$(echo \"--WIP-- \"$(curl -s http://whatthecommit.com/index.txt))\";"
    ; wip = !"git commit -m \"$(echo \"test(wip): --WIP-- \"$(fortune ~/config/fortune/quotes))\";"
    wip= !"git commit -m \"$(echo \"test(wip): \"$(fortune ~/config/fortune/quotes | cut -b1-50| tr '[:upper:]' '[:lower:]'))\" --no-verify;"
    wipp=!"git add .;git wip; git push --no-verify -u;"
    #nb ci diff avec le master
    nbci = !"git rev-list --left-right --count ${1-master}..."
    #extra cmd
    srull = !git stash && git rull && git pop
    fush= push --force-with-lease
    ; aa = "!sh -c 'git add -p $1 && git status;'"
    aa = "!sh -c 'git add -p && git status;'"
    #co to an old commit and keep unmerged files
    sco = "!sh -c 'git diff-index HEAD --quiet --exit-code; NEEDS_STASH=$?; if [ \"$NEEDS_STASH\" -eq \"1\" ] ; then git stash; else echo \"Nothing to stash.\"; fi; git checkout \"$0\"; if [ \"$NEEDS_STASH\" -eq \"1\" ] ; then git stash pop; fi;'"
    #random= !"git commit -m \"$(echo \"$1 - \"$(curl -s http://whatthecommit.com/index.txt))\";"
    random= !"git commit -m \"$(echo \"$1 - \"$(fortune ~/config/fortune/quotes))\";"
    #list des alias definie
    alias= config --get-regexp alias
    #list branches sorted by last modified
    lb = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
    # clear merged branch
    brclr="!sh -c 'git branch --merged | egrep -v \"(^\\*|master|HEAD )\" | xargs git branch -d'"
    # clear deleted branch
    brdel="!f() { for branch in ${2:-$(git branch -vv | grep ': gone]' | awk '{print $1}')}; do git branch -D $branch; done;}; f"
    # full clean
    brclean="!f(){ git fetch --all -p; git brclr; git brdel;}; f"

    brinit=!"git fetch; git co origin/main; git co -b "

    # pr
    pr  = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
# for bitbucket/stash remotes
    spr = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull-requests/$1/from:pr/$1 && git checkout pr/$1; }; f"

    list-ci = "!git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:'- %s (@%aN) '"
    list-jira ="!sh -c 'git list-ci | grep -Eo \"(PE3-[0-9]+)\"| uniq | sort'"


