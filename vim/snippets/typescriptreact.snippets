snippet to-pe3
	////////////////////////////////
	// TODO ${1:PE3-2255}
snippet todo
	////////////////////////////////
	// TODO ${1:delete before prod!!}
	${2://code}
	// TODO $1
	////////////////////////////////
	${1:event}.stopPropagation();${2}
snippet log
	console.log(${1:'oki'});${2}
snippet styled
	import styled from 'styled-components';
snippet import
	import ${1:MyComponent} from 'ui/${2:atoms}/$1';
snippet snap
	expect(tree${1:.toJSON()}).toMatchSnapshot();
snippet t-test
	import { INestApplication } from '@nestjs/common';
	import {
	  HOOK_TIMEOUT,
	  identityIdForRoleFundManager,
	  setupHook,
	  tearDownHook,
	} from 'testing/helper/config';
	import { makeSendQuery } from 'testing/helper/make-send-query';
	
	const query = '
	  $1 $2($input: QueryInput) {
	    result: $2(input: $input) {
	    }
	  }
	';
	
	describe('${1:query} ${2:queryName}', () => {
	  let app: INestApplication;
	
	  beforeAll(async () => {
	    app = await setupHook();
	  }, HOOK_TIMEOUT);
	
	  afterAll(async () => {
	    await tearDownHook(app);
	  }, HOOK_TIMEOUT);
	
	  it("should fail when user can't access to lpId", async () => {
	    const sendQuery = await makeSendQuery({
	      app,
	      identityIdForRole: identityIdForRoleFundManager,
	      query,
	      variables: {
	      }
	    });
	
	    return sendQuery({
	      headers: { lpHeaders: { lpIds: '{}', filteredLpIds: '{}' } },
	    }).expect((res) => {
	      expect(res.body.data).toBe(null);
	      expect(res.body.errors[0].message).toBe('Forbidden resource');
	    });
	  });
	});
snippet t-comp
	interface $1Props {
		${2:prop}: string;
	};

	export const ${1:Component} = ({ $2 }: $1Props) => (
		<div />
	);
snippet t-sto
	// eslint-disable-next-line import/no-extraneous-dependencies
	import { ComponentStory, ComponentMeta } from '@storybook/react';

	import { ${1:Component} } from '.';

	export default {
	  component: $1,
	} as ComponentMeta<typeof $1>;

	const Template: ComponentStory<typeof $1> = (args) => <$1 {...args} />;

	export const ${2:Default} = Template.bind({});
	$2.args = { ${2} };
snippet classnames
	import cls from 'classnames';
snippet ts-ignore
	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
	// @ts-ignore: Unreachable code error
snippet es-dis
	// eslint-disable-next-line $1
snippet React.ForwardRef
	React.ForwardRefRenderFunction<${1:HTMLInputElement, ${2:Comp}Props>
snippet lodash
	import { ${1:get} } from 'lodash';
snippet i18
	import { useTranslation } from 'react-i18next';
snippet trans
	const { t } = useTranslation(${1});
snippet badge-rest
	parameters: {
	  docs: {
		instamed: {
		  badges: ['rest']
		}
	  }
	}
snippet @kym
	import { ${2} } from '@kymdom/${1:models}';
snippet t_schem
	export const ${1:Object}Schema = ${2:z.};

	export type $1 = z.infer<typeof $1Schema>;
snippet querystate
	if (loading || error || data === undefined) {
		return <QueryStateDisplay loading={loading} error={error} />;
	}
snippet yup-mixed
	yup.mixed<${1:Enum}>().oneOf(Object.values($1)),
snippet oContain
	expect.objectContaining(${1:props})${2:;}
snippet uuidv5
	import { v5 as uuidv5 } from 'uuid';
