# $... = array (...)
#snippet array
#	$${1:arrayName} = array('${2}' => ${3});${4}
# my snippet
snippet pr
	print_r($${1:string});${2}
snippet ex
	exit;${1}
snippet pe
	echo "<xmp>";
	print_r($${1:string});${2}
	echo "</xmp>";
	exit;${3}
snippet ve
	echo "<xmp>";
	var_dump($${1:string});${2}
	echo "</xmp>";
	exit;${3}
snippet re
	$replace = array(
		'search' => array('#${1:string}#',${2}),
		'replace' => array(${3}),
	);
	${4:$url} = str_replace($replace['search'], array_map('urlencode', $replace['replace']), ${5:$url});${6}
snippet str_r
	${1:url} = str_replace('${2:search}', '${3:replace}', ${4:source});${5}
snippet preg_m
	preg_match('/${2:regex}/', '${3:replace}', ${4:$source}, ${5:$result)${6}
snippet vd
	var_dump($${1:array});${2}
snippet die
	die(${1:'oki'});${2}
snippet th
	throw new Exception ("${1:string}");${2}
snippet curl
	$ch = curl_init($${1:url});
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	$content = curl_exec($ch);
	curl_close($ch);
	${2}
snippet ass
	$smarty->assign('${1:value}', $${2:value});${3}
snippet ecd
	echo "<!-- DEBUG ${1} DEBUG -->";${2}
snippet flush
	echo ${1:print_r}(${2:var}) . "\n";
	ob_flush();
snippet empty
	if (!empty($${1:var})) {
		${2://code}
	}${3}
snippet dbsite
	$db${1:Site} = Zend_Registry::get('db_${2:site}');${3}
snippet config
	$${1:config} = Zend_Registry::get('$1');${2}
snippet registry
	$${1:config} = Zend_Registry::get('$1');${2}
snippet cache
	$common = Wb_Common::getInstance();
	$controller = $common->getController();

	$cacheKey = "${1:cache_key}";
	$cacheValues = array(
		"${2:id}" => ${3:$value}
	);

	if ($data = $controller->cache->loadWithKey($cacheKey, $cacheValues)) {
		return $data;
	}
	//sql
	$controller->cache->saveWithKey(
		$data,
		$cacheKey,
		$cacheValues,
		array(),
		self::CACHE_PERIOD
	);${4}
snippet loadcache
	$data = $controller->cache->loadWithKey($cacheKey, $cacheValues)${1}
snippet savecache
	$controller->cache->saveWithKey(
		$data,
		$cacheKey,
		$cacheValues,
		array(),
		self::CACHE_PERIOD
	);${1}
snippet delcache
	$controller->cache->removeWithKey(
		$cacheKey,
		$cacheValues,
		true //config from site
	);
snippet oki
	die('oki');${1}
snippet controller
	$common		= Wb_Common::getInstance();
	$controller	= $common->getController();
#SQL PARTS
snippet db_query
	$res = $${1:dbSite}->query($${2:sql});${3}
snippet db_count
	if ($res->rowCount() ${1:==} 0) {
		${2}
	}
snippet label
	${1:controller}->getLabel('LABEL_${2}');${3}
snippet input_data
	$data = $this->getRequest()->getParams();
	$filters    = array('*' => 'StringTrim');
	$validators = array( 'id' => array('allowEmpty' => false, 'presence' => 'required'));
	$options    = array('escapeFilter'  => 'StringTrim');
	$input = new Zend_Filter_Input($filters, $validators, $data, $options);
	if ($input->isValid()) {
		//code
	}${1}
snippet jsonerror
	$this->errorJsonResponse(${1:null});${2}
snippet jsonsuccess
	$this->successJsonResponse(${1:null});${2}
snippet todo
	////////////////////////////////
	// TODO ${1:delete before prod!!}
	${2://code}
	// TODO $1
	////////////////////////////////
snippet indexload
	if(preg_match('/^10.0.1.20[13]$/i', $_SERVER['SERVER_ADDR']) > 0) {
		$library_path = realpath(dirname(__FILE__) . '/../../library');
	} else {
		$library_path = realpath(dirname(__FILE__) . '/../../../library/trunk');
	}
snippet devurl
	dev.url="/\w+(\.fr)?\..+?\.devwebedia\.com/"
snippet getenv
	if ( Zend_Registry::get('env') == 'dev'){
		${1://code}
	}
snippet array_map
	$${1:rows} = array_map( function($$2) {
			return $${2:row};
		},
		$$1
	);${3}
snippet fetchall
	$${1:res} = $${2:dbSite}->query($sql);
	$${3:rows} = $$1->fetchAll();
snippet common
	$common = Wb_Common::getInstance();
snippet catch
	} catch(Exception $e) {
		echo "<xmp>";
		print_r($${1:string});${2}
		echo "</xmp>";
		exit;${3}
	}
