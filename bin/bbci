#!/usr/bin/env bash

COLOR_RESET="\\033[0m"
COLOR_YELLOW="\\033[33m"
#COLOR_GREEN="\\033[32m"
COLOR_RED="\\033[31m"
#COLOR_MAGENTA="\\033[35m"
COLOR_BOLD="\\e[1m"

if [ $# -eq 0 ]; then
	echo
	echo -e "$COLOR_YELLOW Please at list add a commit message ;) $COLOR_RESET"
	echo
	exit 1
fi

MESSAGE=$1
TYPE=${2:-"feat"}
# shellcheck disable=SC2116
TYPES=$(echo build chore ci docs feat fix perf refactor revert style test)

if [[ ! ${TYPES[*]} =~ "${TYPE}"( |$) ]]; then
	echo
	echo -e "$COLOR_RED \xE2\x9D\x8C ${COLOR_YELLOW}${COLOR_BOLD}Type${COLOR_RESET} must be one of:"
    echo -e "    -$COLOR_BOLD$COLOR_YELLOW build${COLOR_RESET}: Changes that affect the build system or external dependencies (example scopes${COLOR_RESET}: gulp, broccoli, npm)"

    echo -e "    -$COLOR_BOLD$COLOR_YELLOW chore${COLOR_RESET}: Changes to the build process or auxiliary tools and libraries such as documentation generation ${COLOR_RESET}"
    echo -e "    -$COLOR_BOLD$COLOR_YELLOW ci${COLOR_RESET}: Changes to our CI configuration files and scripts (example scopes${COLOR_RESET}: Travis, Circle, BrowserStack, SauceLabs)"
    echo -e "    -$COLOR_BOLD$COLOR_YELLOW docs${COLOR_RESET}: Documentation only changes"
    echo -e "    -$COLOR_BOLD$COLOR_YELLOW feat${COLOR_RESET}: A new feature"
    echo -e "    -$COLOR_BOLD$COLOR_YELLOW fix${COLOR_RESET}: A bug fix"
    echo -e "    -$COLOR_BOLD$COLOR_YELLOW perf${COLOR_RESET}: A code change that improves performance"
    echo -e "    -$COLOR_BOLD$COLOR_YELLOW refactor${COLOR_RESET}: A code change that neither fixes a bug nor adds a feature"
    echo -e "    -$COLOR_BOLD$COLOR_YELLOW revert${COLOR_RESET}: A code change that revert a change"
    echo -e "    -$COLOR_BOLD$COLOR_YELLOW style${COLOR_RESET}: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"
    echo -e "    -$COLOR_BOLD$COLOR_YELLOW test${COLOR_RESET}: Adding missing tests or correcting existing tests"
	echo
	exit 1
fi

PACKAGES=$(git diff --name-only --cached \
    | grep -E "^(packages|apps)/" \
    | sed -e 's/\(apps\)\/\([^\/]*\)\/.*$/\2/g' \
    | sed -e 's/\(packages\)\/\([^\/]*\)\/.*$/\2/g' \
    | sort \
    | uniq \
    | tr '\n' ',' \
    | sed -e 's/,$//g'
)
PACKAGES_DETAILS=$([ -n "$PACKAGES" ] && echo "($PACKAGES)" || echo "");

#BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD | sed -e 's,.*/\(.*\),\1,' | sed s/\\./-/g | sed s/_/-/g)
#ISSUE=$(echo $BRANCH_NAME | cut -d"-" -f 1)


COMMIT_MESSAGE="$TYPE$PACKAGES_DETAILS: $MESSAGE"

git commit -m "$COMMIT_MESSAGE"
