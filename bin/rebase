#!/bin/bash
#
# --------------------
#
#   STRUCTURE
#       DETECT_BRANCH
#       FUNCTIONS_DEFINITION
#       WIP_DETECTION
#       LOOKING_STASH
#       UPDATE_TARGET
#       START_REBASE
#       START_MERGE
#       UNSTASH_PART
#       DELETE_PART
#       RESULT_FINAL
#
# --------------------

# FUNCTIONS_DEFINITION
RESET="\\033[0m"
YELLOW="\\033[33m"
GREEN="\\033[32m"
RED="\\033[31m"
MAGENTA="\\033[35m"
BOLD="\\e[1m"

function confirmation {
    echo -e $YELLOW
    read -p "$1" -n 1 -r
    echo -e $RESET   # (optional) move to a new line
    if ! [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "\n"
        if type "fortune" &> /dev/null; then
            echo -e $MAGENTA"$(fortune ~/config/fortune/quotes)" $RESET
        else
            echo -e $MAGENTA"See you next time!!"$RESET
        fi
        echo -e "\n"
        exit
    fi
}

function isOk {
    [ $? -ne 0 ] && echo -e "$RED$1\n\n==> FAILED$RESET" && exit
}

function step {
    echo -e $YELLOW-------------------------------------------------------- [$1]$RESET
}

# DETECT_BRANCH
step "find current branch"
currentBranch="$(git symbolic-ref --short -q HEAD)"
echo $currentBranch
isOk "current branch not found"

destBranch="master"
if [[ $# == 1 ]]; then
    destBranch=$1
fi

if [[ $currentBranch == $destBranch ]]; then
    echo -e $RED "can't merge $destBranch with himself,\n\n DUMBASS!!" && exit
fi

# WIP_DETECTION
gitlol="$(git --no-pager log --pretty=format:"%C(green)%cd %C(red bold)%an%Creset %C(yellow)%h %C(white)%s %C(cyan)%d" --graph --date-order --date=relative -20 --first-parent)"
if [[ $gitlol =~ "WIP" ]]; then
    step "WIP detected"
    echo -e "$(echo "$gitlol" | sed -e "s/WIP/\x1b[1;33mWIP\x1b[0m/g")"
    echo -e $RED"\n WIP presents in the history....\n"$RESET
    confirmation "Do you really want to rebase with it?"
fi

# LOOKING_STASH
git diff-index HEAD --quiet --exit-code;
NEEDS_STASH=$?;

if [ $NEEDS_STASH -eq "1" ]; then
    step "stash unused files"
    git stave "** rebase-script **"
else
    echo "Nothing to stash."
fi

# UPDATE_TARGET
step "update $BOLD$destBranch"
git co $destBranch
isOk "checkout to $destBranch"

git pull
isOk "$destBranch pull"

# START_REBASE
step "rebase $BOLD$currentBranch"
git co $currentBranch
isOk "checkout to $currentBranch"

git rebase $destBranch
isOk "rebase"

# START_MERGE
step "merge $BOLD$currentBranch$RESET$YELLOW in $BOLD$destBranch"

merged=0
echo -e "${YELLOW}Do you want to ${BOLD}merge$RESET$YELLOW branch $BOLD$currentBranch$RESET$YELLOW in $BOLD$destBranch$RESET$YELLOW ?$RESET"
read -p "" -n 1 -r
echo -e $RESET   # (optional) move to a new line
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]; then
    git co $destBranch
    isOk "Checkout to $destBranch"

    git merge $currentBranch
    isOk "merge $currentBranch"
    merged=1
fi

# UNSTASH_PART
if [ $NEEDS_STASH -eq "1" ]; then
    step "recover stashed files"
    git pop
fi

# DELETE_PART
if [[ $merged == "1" && $currentBranch != "dev" && $currentBranch != "master" ]]; then
    step "delete branch $BOLD$currentBranch"
    echo -e "${YELLOW}Do you want to ${BOLD}delete$RESET$YELLOW branch $BOLD$currentBranch$RESET$YELLOW ?$RESET"
    read -p "" -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git br -d $currentBranch
        isOk "branch $currentBranch is deleted"
    fi
fi

# RESULT_FINAL
step "Result"

if type "fortune" &> /dev/null; then
    echo -e "\n"$MAGENTA"$(fortune ~/config/fortune/quotes)" $RESET
fi

if [ $merged -eq "1" ]; then
    echo -e "\n"$GREEN"==> ready to push$RESET\n"
else
    echo -e "\n"$GREEN"==> branch $BOLD$currentBranch$RESET$GREEN up to date$RESET\n"
fi

